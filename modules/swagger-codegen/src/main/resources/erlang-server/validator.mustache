-module({{packageName}}_validator).

-export([child_spec/1]).
-export([start_link/1]).
-export([validate/3]).
-export([get_validator/1]).

-export([init/1]).
-export([handle_call/3]).
-export([handle_cast/2]).
-export([handle_info/2]).
-export([code_change/3]).
-export([terminate/2]).

-export_type([defname/0]).
-export_type([validator/0]).

-type json() :: jsx:json_term().
-type defname() :: binary().
-type validator() ::
    fun((json(), defname()) -> ok | {error, [term()]}).

-spec child_spec(ID :: atom()) ->
    supervisor:child_spec().

child_spec(ID) ->
    #{
        id => {?MODULE, ID},
        start => {?MODULE, start_link, [ID]},
        restart => permanent
    }.

-spec start_link(ID :: atom()) ->
    {ok, pid()}.

start_link(ID) ->
    gen_server:start_link({local, construct_server_ref(ID)}, ?MODULE, [], []).

-spec validate(ID :: atom(), json(), defname()) ->
    ok | {error, [term()]}.

validate(ID, Json, Defname) ->
    do_validate(construct_server_ref(ID), Json, Defname).

-spec get_validator(ID :: atom()) ->
    validator().

get_validator(ID) ->
    fun (Json, Defname) ->
        do_validate(construct_server_ref(ID), Json, Defname)
    end.

do_validate(ServerRef, Json, Defname) ->
    gen_server:call(ServerRef, {validate, Json, Defname}).

construct_server_ref(ID) ->
    binary_to_atom(<<?MODULE_STRING, $_, (atom_to_binary(ID, utf8))/binary>>, utf8).

%%

-type state() ::
    jesse_state:state().

-spec init(_) ->
    {ok, state()}.

init(_) ->
    Schema = get_swagger_schema(),
    {ok, prepare_validator(Schema)}.

-spec handle_call
    ({validate, json(), defname()}, _From, state()) ->
        {reply, ok | {error, [term()]}, state()};
    (_, _From, state()) ->
        {noreply, state()}.

handle_call({validate, Json, Defname}, _From, State) ->
    try
        _ = jesse_schema_validator:validate_with_state(
            [{<<"$ref">>, Defname}],
            Json,
            State
        ),
        {reply, ok, State}
    catch
        throw:Errors when is_list(Errors) ->
            {reply, {error, Errors}, State}
    end;

handle_call(_Call, _From, State) ->
    {noreply, State}.

-spec handle_cast(_Cast, state()) ->
    {noreply, state()}.

handle_cast(_Cast, State) ->
    {noreply, State}.

-spec handle_info(_Info, state()) ->
    {noreply, state()}.

handle_info(_Info, State) ->
    {noreply, State}.

-spec code_change(_, state(), _) ->
    {ok, state()}.
code_change(_, State, _) ->
    {ok, State}.

-spec terminate(_Reason, state()) ->
    ok.
terminate(_, _) ->
    ok.

%%

prepare_validator(Schema) ->
    jesse_state:new(Schema, [{default_schema_ver, <<"http://json-schema.org/draft-04/schema#">>}]).

get_swagger_schema() ->
    {ok, AppName} = application:get_application(?MODULE),
    Filepath = filename:join({{packageName}}_utils:priv_dir(AppName), "swagger.json"),
    {ok, Contents} = file:read_file(Filepath),
    jsx:decode(Contents).
